*
{
	font-family: 'Satisfy ','Lobster','Dancing Script','Lemonada', cursive;
	margin: 0px;
	padding: 0px;
}
body
{
  background-color: rgb(21,22,26);
}
#rc
{
float: left;
position: relative;
	height: auto;
	width: 10%;
	top: 2.2vh;
}
.strong ,a
{
  color:#e66225;
}
div.parent,#yk {
  position: static;
  height: 300px;
}
div.sticky ,#yk{
  position: static;
  width: 50%;
  bottom: 10px;
} 
#mmm
{
	position: fixed;
float: right;
 	top: 2.5vh;
	width: 10%;
	right: 1vw;
}
#ct
{
 color: #e66225;
 vertical-align: middle;
 text-align: center;
 font-size: 4.2em;
 top: 10vh;
}
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  width: 130px;
  background-color: #f1f1f1;
  margin-top: 8vh;
}

li a {
  display: block;
  color: #000;
  padding: 8px 16px;
  text-decoration: none;
}

/* Change the link color on hover */
li a:hover {
  background-color: #555;
  color: white;
   background: linear-gradient(to right,orange,red,pink);
}
h1 {
  text-align: center;
  font-family: 'Roboto', sans-serif;
  color: white;
}
body{
  background-size: cover;
  background-repeat: no-repeat;
}
body {
  background-color: white;
  /* Transitions enable you to define the transition between two states of an element. Note the background color of the body. */
  transition: 0.5s;
  margin: 3em;
  /* Note that the animiation property refers to the value of 'walk'. Scroll down to see the 'walk' keyframe rule. */
  animation: walk 6s infinite;
}

body:hover {
  /* Note the transition property set above in the body. Hover over the robot's body and see what happens! */
  background-color: rgb(21,22,26);
}

.robot {
  position: relative;
  width: 350px;
  margin: auto;
}

.robot .head {
  position: absolute;
  left: 105px;
  animation: headbop 1s infinite alternate; 
}

.robot .body { 
  position: absolute;
  z-index: 1;
  top: 128px;
  left: 80px;
}

.robot .larm {
  animation: wave-larm 1s infinite alternate; 
  position: absolute;
  z-index: 100;
  transform-origin: 80% 10%;
  top: 132px;
  left: 50px; 
}

.robot .rarm {
  animation: wave-rarm 1s infinite alternate; 
  position: absolute;
  z-index: 100;
  transform-origin: 20% 10%; 
  top: 132px;
  left: 240px;
}

.robot .lfoot {
  animation: stomp-lfoot 0.5s infinite alternate;
  position: absolute;
  top: 270px;
  left: 110px;
}

.robot .rfoot {
  animation: stomp-rfoot 0.5s infinite alternate;
  position: absolute;
  top: 270px;
  left: 182px;
}

/* The @keyframes CSS at-rule controls the intermediate steps in a CSS animation sequence. */
  
@keyframes headbop {
  /* The transform CSS property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled and skewed.*/
  0% {transform: translateY(-10px);}
  50% {transform: rotate(5deg);}
  100% {transform: translateY(10px);}
}

@keyframes wave-rarm {
  0% {transform: rotate(-180deg);}
  100% {transform: rotate(90deg);}
}

@keyframes wave-larm {
  0% {transform: rotate(180deg);}
  100% {transform: rotate(-45deg);}
}

@keyframes walk {
  0% {transform: translateX(0);}
  33% {transform: translateX(-100px);}
  66% {transform: translateY(-35px);}
  100% {transform: translate(0)}
}

@keyframes stomp-rfoot {
  0% {transform: translateY(0);}
  100% {transform: translateY(-6px);}
}

@keyframes stomp-lfoot {
  0% {transform: translateY(-6px);}
  100% {transform: translateY(0px);}
}
  
/* All definitions derived from MDN web docs. https://developer.mozilla.org */